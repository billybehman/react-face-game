{"version":3,"sources":["components/books.js","utils/API.js","components/SearchResults.js","components/SavedBooks.js","App.js","serviceWorker.js","index.js"],"names":["Books","props","react_default","a","createElement","className","htmlFor","placeholder","onChange","handleInputChange","value","name","type","id","onClick","handleFormSubmit","API","search","query","axios","get","SearchResults","hi","React","createRef","results","map","book","key","ref","volumeInfo","title","authors","description","src","imageLinks","thumbnail","href","canonicalVolumeLink","e","saveFunc","SavedBooks","myBooks","_id","author","imageLink","link","delFunc","App","state","result","mySavedBooks","event","target","_this","setState","preventDefault","then","res","data","items","catch","err","console","log","bookObj","post","delete","concat","getMyBooks","this","_this2","react_router_dom","react_router","exact","path","render","Fragment","books","components_SearchResults","components_SavedBooks","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.aec63e4b.chunk.js","sourcesContent":["import React from \"react\"\n\n\nfunction Books(props) {\n    return (\n        <div className=\"books\">\n            <h1>Books</h1>\n            <label htmlFor=\"search\">Search:</label>\n            <input \n                placeholder=\"Search Book\"\n                onChange={props.handleInputChange}\n                value={props.value}\n                name=\"search\"\n                type=\"text\"\n                id=\"search\"\n            />\n            <button onClick={props.handleFormSubmit}>Search</button>\n        </div>\n    )\n\n}\n\nexport default Books\n\n","import axios from \"axios\";\n\nexport default {\n    search: function (query) {\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + query);\n    }\n};\n","import React, { Component } from \"react\"\n\nfunction SearchResults(props) {\n\n    const hi = React.createRef()\n\n\n    return (\n        <div>\n            {props.results.map(book => (\n                <div \n                    key={book.id} \n                    ref={hi}\n                >\n                    Book: {book.volumeInfo.title} \n                    Author: {book.volumeInfo.authors[0]} \n                    Description: {book.volumeInfo.description}\n                    <img src={book.volumeInfo.imageLinks.thumbnail} /> \n                    <a href={book.volumeInfo.canonicalVolumeLink}>See Book</a> \n                    <button onClick={(e) => props.saveFunc(e, book)}>Save Book</button>\n                </div>\n            ))}\n        </div>\n    )\n\n}\n\nexport default SearchResults","import React from \"react\"\nimport { PromiseProvider } from \"mongoose\"\n\nfunction SavedBooks(props) {\n    return (\n        <div>\n            {props.myBooks.map(book => (\n                <div key={book._id}>\n                    Book: {book.title}\n                    Author: {book.author}\n                    Description: {book.description}\n                    <img src={book.imageLink} />\n                    <a href={book.link}>See Book</a>\n                    <button onClick={(e) => props.delFunc(e, book)}>DeleteBook</button>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default SavedBooks","import React, { Component } from 'react';\nimport Books from \"./components/books\"\nimport API from \"./utils/API\"\nimport SearchResults from \"./components/SearchResults\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport SavedBooks from \"./components/SavedBooks\"\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n    search: \"\",\n    result: [],\n    mySavedBooks: []\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value\n    this.setState({\n      search: value\n    })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault()\n    API.search(this.state.search).then(res => this.setState({ result: res.data.items })).catch(err => console.log(err))\n  }\n\n  saveFunc = (event, book) => {\n    event.preventDefault()\n    let bookObj = {\n      title: book.volumeInfo.title,\n      author: book.volumeInfo.authors[0],\n      description: book.volumeInfo.description,\n      link: book.volumeInfo.canonicalVolumeLink,\n      imageLink: book.volumeInfo.imageLinks.thumbnail\n    }\n    axios.post(\"http://localhost:3000/api/save-book\", bookObj).then(function(data) {\n      console.log(data)\n    }).catch(function(err) {\n      console.log(err)\n    })\n  }\n\n  delFunc = (event, book) => {\n    event.preventDefault()\n    axios.delete(`http://localhost:3000/api/delete-book/${book._id}`).then(this.getMyBooks())\n  }\n\n\n  componentDidMount() {\n    this.getMyBooks()\n  }\n\n  getMyBooks = () => {\n    axios.get(\"http://localhost:3000/api/get-books\").then(data => this.setState({ mySavedBooks: data.data }))\n  }\n\n  \n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" render={props => (\n            <React.Fragment>\n              <Books\n                value={this.state.search}\n                handleInputChange={this.handleInputChange}\n                handleFormSubmit={this.handleFormSubmit}\n              />\n              <SearchResults\n                results={this.state.result}\n                saveFunc={this.saveFunc}\n              />\n            </React.Fragment>\n          )} />\n          <Route path=\"/saved-books\" render={props => (\n            <React.Fragment>\n              <SavedBooks\n                myBooks={this.state.mySavedBooks}\n                delFunc={this.delFunc}\n              />\n            </React.Fragment>\n          )}>\n\n          </Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}